#!/bin/bash

# python-link-harvester ( Coletor de link do python )
# Autor: Leonardo Bruno
# Contato: souzalb@proton.me
# Vers√£o: 1.0
# Data: 29/06/2025

# Verifica se o lynx est√° instalado
if ! command -v lynx &> /dev/null; then
    echo "‚ùå Erro: O comando 'lynx' n√£o est√° instalado."
    echo "Por favor instale o lynx para continuar:"
    echo ""
    echo "üì¶ Para sistemas baseados em Debian/Ubuntu:"
    echo "  sudo apt-get install lynx"
    echo ""
    echo "üì¶ Para sistemas baseados em RHEL/CentOS:"
    echo "  sudo yum install lynx"
    echo ""
    echo "üì¶ Para sistemas baseados em Arch:"
    echo "  sudo pacman -S lynx"
    echo ""
    echo "üì¶ Para macOS (via Homebrew):"
    echo "  brew install lynx"
    exit 1
fi

# URL base para downloads do c√≥digo fonte do Python
URL_BASE="https://www.python.org/downloads/source/"

# Extens√£o do arquivo desejado (c√≥digo fonte compactado)
EXTENSION="tar.xz"

# Nome do arquivo de sa√≠da para os links
OUTPUT_FILE="links-python.txt"

# Limpar o arquivo de sa√≠da (cria novo ou sobrescreve existente)
> "$OUTPUT_FILE"

# Mensagens iniciais para o usu√°rio
echo "üöÄ Iniciando busca em: $URL_BASE"
echo "üîç Procurando por arquivos .${EXTENSION}"
echo "‚è≥ Aguarde alguns instantes..."
echo "üìÅ Processando: ${URL_BASE}"

temp_links=$(mktemp)
temp_sorted=$(mktemp)

# Coletar links usando lynx - navegador baseado em texto
# lynx: Renderiza a p√°gina e lista todos os links
# grep: Filtra apenas links que terminam com a extens√£o desejada
# awk: Extrai apenas a URL (segunda coluna do output do lynx)
# sort -u: Remove URLs duplicadas
lynx -dump -listonly "$URL_BASE" | grep -E "$EXTENSION$" | awk '{print $2}' | sort -u > "$temp_links"

# Faz a contagem dos links encontrados
total_files=$(wc -l < "$temp_links")

# Processar cada link para extrair a vers√£o do Python
while IFS= read -r url; do
    # Extrair apenas o nome do arquivo da URL
    filename=$(basename "$url")
    
    # Usar express√£o regular para extrair a vers√£o
    # Padr√£o esperado: Python-<vers√£o>.tar.xz
    if [[ $filename =~ Python-(.*).tar.xz ]]; then
        # Captura a parte entre "Python-" e ".tar.xz"
        version="${BASH_REMATCH[1]}"
        
        # Converter vers√£o para formato orden√°vel:
        # Substitui pontos por espa√ßos (ex: "3.9.1" ‚Üí "3 9 1")
        sortable_version=$(echo "$version" | tr '.' ' ')
        
        # Formatar sa√≠da: vers√£o orden√°vel + tab + URL
        echo -e "$sortable_version\t$url"
    fi
done < "$temp_links" > "$temp_sorted"

# Ordenar numericamente por vers√£o:
# -k1,1n: Ordena primeira parte num√©rica (major version)
# -k2,2n: Ordena segunda parte (minor version)
# -k3,3n: Ordena terceira parte (patch version)
# -k4,4n: Ordena quarta parte (caso exista, ex: rc1, alpha2)
sort -k1,1n -k2,2n -k3,3n -k4,4n "$temp_sorted" | cut -f2- > "$OUTPUT_FILE"

# Contar arquivos ap√≥s processamento
total_files_after=$(wc -l < "$OUTPUT_FILE")

# Mostrar links ordenados ao usu√°rio
echo ""
echo "üìã Lista de links ordenados:"
while IFS= read -r link; do
    echo "  ‚úÖ $link"
done < "$OUTPUT_FILE"

# Remover arquivos tempor√°rios
rm "$temp_links" "$temp_sorted"

# Exibir relat√≥rio final
echo ""
echo "‚úÖ Busca conclu√≠da!"
echo "================================="
echo "üì¶ Arquivos encontrados:    $total_files"
echo "üîß Ap√≥s remover duplicatas: $total_files_after"
echo "üíæ Links salvos em:         $OUTPUT_FILE"
echo "================================="
